# -*- coding: utf-8 -*-
"""Problem 2 - EF Andres Cisneros.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1v8UcbONFR8iSmI46LEvMt81K9VHdUZVL
"""

import pandas as pd

# Replace 'your_file_path.csv' with the actual path to your CSV file
file_path = 'university_student_dashboard_data.csv'

df = pd.read_csv(file_path)
print("Data loaded successfully.")
print(df.head(10)) # Display the first few rows

# prompt: instala streamlit

!pip install streamlit

import streamlit as st
import matplotlib.pyplot as plt
import numpy as np

# Título de la aplicación
st.title("Tracking admission process")

# prompt: crea un grafico de barras apiladas de total aplications del  year separando cada term y con etiquetas de datos para mostrar aqui. muestra el dato total encima de cada barra

import matplotlib.ticker as mtick

# Group data by year and term, then sum applications
applications_by_year_term = df.groupby(['Year', 'Term'])['Applications'].sum().unstack()

# Create the stacked bar chart
ax = applications_by_year_term.plot(kind='bar', stacked=True, figsize=(10, 6))

# Add data labels on top of each bar
for p in ax.patches:
    width, height = p.get_width(), p.get_height()
    x, y = p.get_xy()
    ax.annotate(f'{height:.0f}', (x + width / 2, y + height / 2), ha='center', va='center', fontsize=8, color='white', fontweight='bold')

# Add total applications label above each stacked bar
totals = applications_by_year_term.sum(axis=1)
for i, total in enumerate(totals):
    ax.annotate(f'{total:.0f}', (i, total), ha='center', va='bottom', fontsize=10, fontweight='bold')


# Customize the plot
plt.xlabel("Year")
plt.ylabel("Total Applications")
plt.title("Total Applications per Year and Term")
plt.xticks(rotation=0) # Rotate x-axis labels for better readability
plt.gca().yaxis.set_major_formatter(mtick.StrMethodFormatter('{x:,.0f}')) # Format y-axis labels with commas

# Display the chart in Streamlit
st.pyplot(plt)

plt.show()

# Group data by year and term, then sum applications and admissions
grouped_data = df.groupby(['Year', 'Term'])[['Applications', 'Admitted']].sum().reset_index()

# Create the figure and axes
fig, ax = plt.subplots(figsize=(10, 6))

# Define the width of the bars
width = 0.35

# Plot the bars for Applications and Admissions side-by-side
x = range(len(grouped_data))
ax.bar([i - width / 2 for i in x], grouped_data['Applications'], width, label='Applications')
ax.bar([i + width / 2 for i in x], grouped_data['Admitted'], width, label='Admitted')

# Add data labels on top of each bar
def add_labels(bars):
  for bar in bars:
    height = bar.get_height()
    ax.annotate(f'{height:.0f}',
                xy=(bar.get_x() + bar.get_width() / 2, height),
                xytext=(0, 3),  # 3 points vertical offset
                textcoords="offset points",
                ha='center', va='bottom', fontsize=8, fontweight='bold')

add_labels(ax.patches[:len(grouped_data)]) #Labels for applications
add_labels(ax.patches[len(grouped_data):]) #Labels for admissions


# Customize the plot
ax.set_xlabel("Year and Term")
ax.set_ylabel("Count")
ax.set_title("Total Applications and Admissions per Year and Term")
ax.set_xticks(x)
ax.set_xticklabels([f"{year} - {term}" for year, term in zip(grouped_data['Year'], grouped_data['Term'])], rotation=45, ha='right')
ax.yaxis.set_major_formatter(mtick.StrMethodFormatter('{x:,.0f}'))
ax.legend()
plt.tight_layout()


# Display the chart in Streamlit
st.pyplot(fig)

plt.show()

# prompt: toma las columnas Engineering Enrolled, Business Enrolled, Arts Enrolled, y Science Enrolled y muestralas en barras por Year y Term

import matplotlib.pyplot as plt

# Assuming 'df' is your DataFrame and it's already loaded

# Group data by year and term, then sum enrollments for each field
enrollment_by_year_term = df.groupby(['Year', 'Term'])[['Engineering Enrolled', 'Business Enrolled', 'Arts Enrolled', 'Science Enrolled']].sum().reset_index()

# Create the grouped bar chart
fig, ax = plt.subplots(figsize=(12, 6))

width = 0.2

x = np.arange(len(enrollment_by_year_term))

ax.bar(x - 1.5 * width, enrollment_by_year_term['Engineering Enrolled'], width, label='Engineering')
ax.bar(x - 0.5 * width, enrollment_by_year_term['Business Enrolled'], width, label='Business')
ax.bar(x + 0.5 * width, enrollment_by_year_term['Arts Enrolled'], width, label='Arts')
ax.bar(x + 1.5 * width, enrollment_by_year_term['Science Enrolled'], width, label='Science')

# Add labels and title
ax.set_xlabel("Year and Term")
ax.set_ylabel("Number of Students Enrolled")
ax.set_title("Enrollment by Field, Year, and Term")
ax.set_xticks(x)
ax.set_xticklabels([f"{year} - {term}" for year, term in zip(enrollment_by_year_term['Year'], enrollment_by_year_term['Term'])], rotation=45, ha='right')
ax.legend()

plt.tight_layout()

# Display the chart in Streamlit
st.pyplot(fig)

plt.show()

# prompt: grafica la tendencia de de la columna Retention Rate (%) per Year and Term ="Spring" Term = "Fall" usa streamlit

# Filter data for Spring and Fall terms
spring_data = df[df['Term'] == 'Spring']
fall_data = df[df['Term'] == 'Fall']


st.title('Retention Rate Trend')

# Create line charts for Spring and Fall
fig, ax = plt.subplots(figsize=(10, 6))
ax.plot(spring_data['Year'], spring_data['Retention Rate (%)'], label='Spring', marker='o')
ax.plot(fall_data['Year'], fall_data['Retention Rate (%)'], label='Fall', marker='o')

# Customize chart appearance
ax.set_xlabel('Year')
ax.set_ylabel('Retention Rate (%)')
ax.set_title('Retention Rate Trend by Year and Term')
ax.legend()
ax.grid(True)

# Display the chart in Streamlit
st.pyplot(fig)

# prompt: usando streamlit muestra la tendencia del promedio de Student Satisfaction (%) per fall in each Year

# Assuming 'df' is your DataFrame and it's already loaded

st.title('Student Satisfaction Trend')

# Group data by year and term, then calculate the average student satisfaction
satisfaction_by_year_term = df.groupby(['Year', 'Term'])['Student Satisfaction (%)'].mean().reset_index()

# Filter data for Fall term
fall_data = satisfaction_by_year_term[satisfaction_by_year_term['Term'] == 'Fall']

# Create a line chart for Fall term
fig, ax = plt.subplots(figsize=(10, 6))
ax.plot(fall_data['Year'], fall_data['Student Satisfaction (%)'], marker='o')

# Customize chart appearance
ax.set_xlabel('Year')
ax.set_ylabel('Average Student Satisfaction (%)')
ax.set_title('Average Student Satisfaction Trend (Fall Term)')
ax.grid(True)

# Display the chart in Streamlit
st.pyplot(fig)

# prompt: Enrollment breakdown by the columns Engineering Enrolled, Business Enrolled, Arts Enrolled, Science Enrolled por Year

# Assuming 'df' is your DataFrame and it's already loaded from the previous code

import plotly.express as px

# Group data by year and then sum enrollments for each field
enrollment_by_year = df.groupby('Year')[['Engineering Enrolled', 'Business Enrolled', 'Arts Enrolled', 'Science Enrolled']].sum().reset_index()

# Create the interactive grouped bar chart using Plotly Express
fig = px.bar(enrollment_by_year,
             x='Year',
             y=['Engineering Enrolled', 'Business Enrolled', 'Arts Enrolled', 'Science Enrolled'],
             title='Enrollment Breakdown by Year',
             labels={'value': 'Number of Students Enrolled', 'variable': 'Field of Study'},
             barmode='group') # Use 'group' for grouped bar chart


# Display the chart in Streamlit
st.plotly_chart(fig)

# prompt: use the column Term to o	Comparison "Spring" vs. "Fall" trends of the Retention

# Assuming 'df' is your DataFrame and it's already loaded from the previous code

st.title('Retention Rate Comparison: Spring vs. Fall')

# Filter data for Spring and Fall terms
spring_data = df[df['Term'] == 'Spring']
fall_data = df[df['Term'] == 'Fall']

# Group data by year for Spring and Fall terms
spring_retention = spring_data.groupby('Year')['Retention Rate (%)'].mean().reset_index()
fall_retention = fall_data.groupby('Year')['Retention Rate (%)'].mean().reset_index()

# Create a combined DataFrame for easier plotting
retention_comparison = pd.merge(spring_retention, fall_retention, on='Year', suffixes=('_Spring', '_Fall'))

# Create the line chart using Plotly Express for interactivity
fig = px.line(retention_comparison,
              x='Year',
              y=['Retention Rate (%)_Spring', 'Retention Rate (%)_Fall'],
              labels={'value': 'Retention Rate (%)', 'variable': 'Term'},
              title='Retention Rate Comparison: Spring vs. Fall',
              markers=True) # Add markers to the line chart

# Customize the chart (optional)
fig.update_layout(xaxis_title='Year', yaxis_title='Retention Rate (%)')


# Display the chart in Streamlit
st.plotly_chart(fig)

# prompt: o	Compare trends between the columns Engineering Enrolled, Business Enrolled, Arts Enrolled, Science Enrolled, retention rates, and satisfaction levels.

# Assuming 'df' is your DataFrame and it's already loaded from the previous code

st.title('Trend Comparison: Enrollments, Retention, and Satisfaction')

# Group data by year for easier trend analysis
yearly_data = df.groupby('Year').agg({
    'Engineering Enrolled': 'sum',
    'Business Enrolled': 'sum',
    'Arts Enrolled': 'sum',
    'Science Enrolled': 'sum',
    'Retention Rate (%)': 'mean',
    'Student Satisfaction (%)': 'mean'
}).reset_index()

# Create the line chart using Plotly Express for interactivity
fig = px.line(yearly_data,
              x='Year',
              y=['Engineering Enrolled', 'Business Enrolled', 'Arts Enrolled', 'Science Enrolled',
                 'Retention Rate (%)', 'Student Satisfaction (%)'],
              labels={'value': 'Value', 'variable': 'Metric'},
              title='Trend Comparison: Enrollments, Retention, and Satisfaction',
              markers=True)  # Add markers to the line chart


# Customize the chart (optional)
fig.update_layout(xaxis_title='Year', yaxis_title='Value')


# Display the chart in Streamlit
st.plotly_chart(fig)
